#!/bin/sh
#
EXIST_CODE=0
readonly BACKGROUND_GREEN_COLOR='\033[0;42m'
readonly RED_COLOR='\033[0;31m'
readonly ORANGE_COLOR='\033[0;33m'
readonly GREEN_COLOR='\033[0;32m'
readonly NO_COLOR='\033[0m'
readonly PHP_STAGED_FILES=$(git diff --staged --diff-filter=ACMR --name-only "*.php" ':!*.blade.php' ':!vendor/' ':!config/' ':!routes/' ':!app/Providers' ':!app/Console/Kernel.php' ':!app/Http/Kernel.php' ':!app/Exceptions/*.php' ':!database/migrations/*.php')
readonly PHP_STAGED_FILES_SEPARATE_BY_SPACE=$(echo -e $PHP_STAGED_FILES | tr "\n" " ")

output() {
    echo -e "${ORANGE_COLOR}$1${NO_COLOR}"
}

output_error() {
    echo -e " - ${RED_COLOR}$1${NO_COLOR}"
}

output_warning() {
    echo -e "${ORANGE_COLOR}$1${NO_COLOR}"
}

output_success() {
    echo -e "${GREEN_COLOR}$1${NO_COLOR}"
}

output_ending_line() {
    printf '%.s=' {1..79}
    echo ''
}

check_syntax_error() {
    #check empty string
    [[ -z "${PHP_STAGED_FILES}" ]] && return 0

    output "<============ Begin check syntax error ============>"
    php -v > /dev/null 2>&1

    if [[ "$?" != "0" ]]; then
        output_warning "Skipping task: php files check syntax error because not found 'php' in system PATH"
        return 0
    fi

    for file in ${PHP_STAGED_FILES_SEPARATE_BY_SPACE};
    do
        [[ ! -f $file ]] && continue
        output_warning php -l $file 1>/dev/null
        [[ $? -ne 0 ]] && EXIT_CODE=1
    done
    output "<============ End check syntax error ============>"
}

fix_format_code() {
    output "<============ Begin fix format code ============>"
    for file in ${PHP_STAGED_FILES_SEPARATE_BY_SPACE};
    do
        [[ ! -f $file ]] && continue
        echo -e "${GREEN_COLOR}Detect file: $file${NO_COLOR}"
        readonly ERROR_FORMAT=$(php tools/git/hooks/phpcbf.phar $file 2>/dev/null)
        output_error "${ERROR_FORMAT}"
        git add $file
    done
    output "<============ End fix format code ============>"
}

check_code_sniffer() {
    output "<============ Begin check code sniffer ============>"
    for file in ${PHP_STAGED_FILES_SEPARATE_BY_SPACE};
    do
        [[ ! -f $file ]] && continue
        echo -e "${GREEN_COLOR}Detect file: $file${NO_COLOR}"
        readonly ERROR_SNIFFER=$(php tools/git/hooks/phpcs.phar --standard=tools/git/hooks/CodeSnifferRule --report=emacs $file 2>/dev/null)
        [[ ERROR_SNIFFER -ne '' ]] && output_error "${ERROR_SNIFFER}"
        [[ $? -ne 0 ]] && EXIT_CODE=1
    done
    output "<============ End check code sniffer ============>"
}

check_mess_code() {
    output "<============ Begin check mess code ============>"
    for file in ${PHP_STAGED_FILES_SEPARATE_BY_SPACE};
    do
        [[ ! -f $file ]] && continue
        echo -e "${GREEN_COLOR}Detect file: $file${NO_COLOR}"
        readonly ERROR_MESS=$(php tools/git/hooks/phpmd.phar $file ansi codesize,unusedcode,naming 2>/dev/null)
        output_error "${ERROR_MESS}"
        [[ $? -ne 0 ]] && EXIT_CODE=1
    done
    output "<============ End check mess code ============>"
}

check_debugging() {
    output "<============ Begin check debugging ============>"
    for file in ${PHP_STAGED_FILES_SEPARATE_BY_SPACE};
    do
        [[ ! -f $file ]] && continue
        echo -e "${GREEN_COLOR}Detect file: $file${NO_COLOR}"
        readonly ERROR=$(grep -rn $file -e 'dump(' -e 'dd(' -e 'exit' -e 'die(' -e 'var_dump(')
        output_error "${ERROR}"
        [[ $? -ne 1 ]] && EXIT_CODE=1
    done
    output "<============ End check debugging ============>"
}

main() {
    check_syntax_error
    echo ""
    echo ""
    fix_format_code
    echo ""
    echo ""
    check_code_sniffer
    echo ""
    echo ""
    check_mess_code
    echo ""
    echo ""
    check_debugging
    exit $EXIT_CODE
}

main

